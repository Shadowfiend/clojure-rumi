; The below assumes the REPL is being run from the root directory of the source
; code.
(add-classpath (str "file://" (System/getProperty "user.dir") "/"))
(ns rumi-logic-test
  (:require rumi-logic ext.fact))
(refer 'rumi-logic)
(refer 'fact)


; Supporting methods for the rumi-logic tests.

(defn tile
  "Generates a tile with the given color and the given number. Returns nil if the color or number is not valid."
  [color number]
  (if (or (nil? (. (vec colors) (indexOf color))) (> 1 number) (< 13 number))
    nil
    {:color color :number number}))

(defn create-list
  "Generate a list of random length between 1 and 20 whose elements are generated by the passed parameterless method"
  ([f]
      (create-list f '() (+ 1 (rand-int 19))))
  ([f elem-list num]
      (if (= 1 num)
        (cons (f) elem-list)
        (recur f (cons (f) elem-list) (- num 1)))))

(defn create-seq
  "Creates a seq of random length between 1 and 20 whose elements are generated by the passed parameterless method."
  [f]
  (seq (create-list f)))

(defn create-valid-tile-list-with-same-color
  "Creates a list of tiles as follows: all tiles will have the same color, defined by the \"color\" parameter, and the numbers will be sequential starting from \"base-number + 1\". There will be \"number\" total tiles."
  ([color number base-number]
          (create-valid-tile-list-with-same-color color
                                                  number
                                                  base-number
                                                  '()))
  ([color number base-number tile-list]
          (if (= 0 number)
            tile-list
            (recur color
                   (- number 1)
                   base-number
                   (cons (tile color (+ base-number number)) tile-list)))))

(defn random-valid-tile-list-with-same-color
  "Creates a valid list of tiles with the same color, i.e. a list of tiles with the same :color attribute and sequential :number attributes. The list may or may not be sorted by :number attribute."
  []
  (let [color (nth colors (rand-int 3))
        number (+ 1 (rand-int 12))
        base-number (rand-int (- 13 number))]
    (create-valid-tile-list-with-same-color color number base-number)))

(defn random-invalid-tile-list-with-same-color
  "Creates an invalid list of tiles with the same color, i.e., a list of tiles with the same :color attribute and non-sequential :number attributes."
  []
  (let [color (nth colors (rand-int 3))
        number-1 (+ 1 (rand-int 5))
        base-number (rand-int (- 8 number-1))
        number-2 (+ 1 (rand-int (- 13 base-number number-1)))]
    (concat (create-valid-tile-list-with-same-color
              color number-1 base-number)
            (create-valid-tile-list-with-same-color
              color number-2 (+ base-number number-1 1)))))

(defn create-colors-set
  "Creates a set of colors. The parameter version of this method is not intended for use outside the method itself."
  ([]
    (create-colors-set 4 '()))
  ([num-colors color-list]
               (if (= 0 num-colors)
                 (set color-list)
                 (recur (- num-colors 1)
                        (cons (nth colors (rand-int 3)) color-list)))))

(defn valid-tile-list-with-same-number
  "Creates a valid list of tiles with the same number and the given color set. A valid list does not have a repeated color. If called without parameters, this function creates an random list."
  ([]
    (valid-tile-list-with-same-number (create-colors-set) 
                                             (+ 1 (rand-int 13))
                                             '()))
  ([color-set number tile-list]
              (if (= 0 (count color-set))
                tile-list
                (recur (rest color-set)
                       number
                       (cons (tile (first color-set) number)
                             tile-list)))))

(defn random-invalid-tile-list-with-same-number
  "Creates an invalid list of tiles with the same number. An invalid list contains at least one repeated color"
  []
  (let [valid-list (valid-tile-list-with-same-number)
        split-point (rand-int (+ 1 (count valid-list)))
        double-tile (nth valid-list (rand-int (count valid-list)))
        new-tile (tile (get double-tile :color)
                       (get double-tile :number))]
    (concat (take split-point valid-list)
            (list new-tile)
            (drop split-point valid-list))))

(defn invalid-tile-list-seq
  "Creates a non-random seq containing one invalid tile list."
  []
  (seq (list (list (tile :red 1) (tile :blue 2)))))

; The actual tests.

(fact "groups of the same color and consecutive numbers are valid"
      [x (create-seq random-valid-tile-list-with-same-color)]
      (is-valid-combination? x))

(fact "groups of the same color and non-sequential numbers are invalid."
      [x (create-seq random-invalid-tile-list-with-same-color)]
      (not (is-valid-combination? x)))

(fact "groups of the same number and non-repeated colors are valid"
      [x (create-seq valid-tile-list-with-same-number)]
      (is-valid-combination? x))

(fact "groups of the same number with repeated colors are invalid"
      [x (create-seq random-invalid-tile-list-with-same-number)]
      (not (is-valid-combination? x)))

(fact "a group with differeing colors and numbers is invalid"
      [x (invalid-tile-list-seq)]
      (not (is-valid-combination? x)))

(fact "add-to-tile-list called with a tile as the argument returns a list with that tile as the sole content"
      [x (seq (list (tile :blue 1)))]
      (= 1 (count (add-tile-to-list x))))

(fact "adding a tile with appropriate number and of a unique color to a valid set of tiles of the same number should return a tile list with one more element."
      [x (seq (list (valid-tile-list-with-same-number #{:blue :red} 1 '())))
       y (seq (list (tile :orange 1)
                    (tile :black 1)))]
      (= 1 (- (count (add-tile-to-list y x)) (count x))))

(fact "adding  an inappropriate tile to a valid set of tiles of the same number should return nil."
      [x (seq (list (valid-tile-list-with-same-number #{:blue :red} 1 '())))
       y (seq (list (tile :blue 1)
                    (tile :orange 2)))]
      (nil? (add-tile-to-list y x)))

(fact "adding a tile with a sequential number and of the appropriate color to a valid set of tiles of the same color should return a tile list with one more element."
      [x (seq (list (create-valid-tile-list-with-same-color :blue 3 2)))
       y (seq (list (tile :blue 2)
                    (tile :blue 6)))]
      (= 1 (- (count (add-tile-to-list y x)) (count x))))

(fact "adding a non-appropriate tile (either a non-sequential number or the wrong color) to a valid set of tiles of the same color should return nil."
      [x (seq (list (create-valid-tile-list-with-same-color :blue 3 2)))
       y (seq (list (tile :blue 1)
                    (tile :orange 6)))]
      (nil? (add-tile-to-list y x)))

(print-color-results (verify-facts 'rumi-logic-test))
