; The below assumes the REPL is being run from the root directory of the source
; code.
(add-classpath (str "file://" (System/getProperty "user.dir") "/"))
(ns rumi-logic-test
  (:require rumi-logic ext.fact))
(refer 'rumi-logic)
(refer 'fact)


; Supporting methods for the rumi-logic tests.

(defn tile
  "Generates a tile with the given color and the given number. Returns nil if the color or number is not valid."
  [color number]
  (if (or (nil? (. (vec colors) (indexOf color))) (> 1 number) (< 13 number))
    nil
    {:color color :number number}))

(defn #^{:doc "Generates a random tile from the expected tile space."}
  random-tile []
  (tile (nth (seq colors) (rand-int 4))
        (+ 1 (rand-int 13))))

(defn create-list
  "Generate a list of random length between 1 and 20 whose elements are generated by the passed parameterless method"
  ([f]
      (create-list f '() (+ 1 (rand-int 19))))
  ([f elem-list num]
      (if (= 1 num)
        (cons (f) elem-list)
        (recur f (cons (f) elem-list) (- num 1)))))

(defn create-seq
  "Creates a seq of random length between 1 and 20 whose elements are generated by the passed parameterless method."
  [f]
  (seq (create-list f)))

(defn create-valid-tile-list-with-same-color
  "Creates a list of tiles as follows: all tiles will have the same color, defined by the \"color\" parameter, and the numbers will be sequential starting from \"base-number + 1\". There will be \"number\" total tiles."
  ([color number base-number]
          (create-valid-tile-list-with-same-color color
                                                  number
                                                  base-number
                                                  '()))
  ([color number base-number tile-list]
          (if (= 0 number)
            tile-list
            (recur color
                   (- number 1)
                   base-number
                   (cons (tile color (+ base-number number)) tile-list)))))

(defn random-valid-tile-list-with-same-color
  "Creates a valid list of tiles with the same color, i.e. a list of tiles with the same :color attribute and sequential :number attributes. The list may or may not be sorted by :number attribute."
  []
  (let [color (nth colors (rand-int 3))
        number (+ 1 (rand-int 12))
        base-number (rand-int (- 13 number))]
    (create-valid-tile-list-with-same-color color number base-number)))

(defn random-invalid-tile-list-with-same-color
  "Creates an invalid list of tiles with the same color, i.e., a list of tiles with the same :color attribute and non-sequential :number attributes."
  []
  (let [color (nth colors (rand-int 3))
        number-1 (+ 1 (rand-int 5))
        base-number (rand-int (- 8 number-1))
        number-2 (+ 1 (rand-int (- 13 base-number number-1)))]
    (concat (create-valid-tile-list-with-same-color
              color number-1 base-number)
            (create-valid-tile-list-with-same-color
              color number-2 (+ base-number number-1 1)))))


; The actual tests.

(fact "groups of the same color and consecutive numbers are valid"
      [x (create-seq random-valid-tile-list-with-same-color)]
      (is-valid-combination? x))

(fact "groups of the same color and non-sequential numbers are invalid."
      [x (create-seq random-invalid-tile-list-with-same-color)]
      (not (is-valid-combination? x)))

(print-color-results (verify-facts 'rumi-logic-test))
